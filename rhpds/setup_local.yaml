#!/usr/bin/env ansible-playbook
---
- name: "Setting Up Local Environment based on existing OpenShift 4.3"
  hosts: localhost
  connection: local
  vars_files: 
        - configuration.yaml
        - credentials.yaml
  gather_facts: True
  tasks:
     - name: "Parameter: username"
       fail: msg="username is not defined or is empty"
       when: username is not defined or username is none
       tags: [ always ]

     - name: "Parameter: password"
       fail: msg="password is not defined or is empty"
       when: password is not defined or password is none
       tags: [ always ]

     - name: "Logging In"
       uri: url={{ cloudforms_api_url }}/api/auth method=GET status_code=200 
            force_basic_auth=True
            user={{ username }} password={{ password }}
            headers={"Content-type":"application/json","Accept":"application/json"}
       register: authentication

     - name: "Authentication Token{{ ':' }} {{ authentication.json.auth_token }}"
       set_fact: authentication_token="{{ authentication.json.auth_token }}"

     - name: Retrieving Service URL
       uri: url={{ cloudforms_api_url }}/api/services method=GET status_code=200
            headers={"Content-type":"application/json","Accept":"application/json","X-Auth-Token":"{{ authentication_token }}"}
       register: list_services

     - name: "Check if there are any available services"
       fail: msg="There are no available services"
       when: list_services.json.subcount == 0

     - name: "Service Selected{{ ':' }} {{ list_services.json.resources[0].href }}"
       set_fact: service_selected="{{ list_services.json.resources[0].href }}"

     - name: "Fetching Custom Attributes{{ ':' }} {{ service_selected }}"
       uri: url={{ service_selected }}?attributes=custom_attributes method=GET status_code=200
            headers={"Content-type":"application/json","Accept":"application/json","X-Auth-Token":"{{ authentication_token }}"}
       register: custom_attributes

     - name: Fetching OpenShift API (Environment Info 1)
       set_fact: openshift_api={{ custom_attributes|json_query("json.custom_attributes[?name=='Environment Info 1'].value")|first|regex_replace("^Openshift API for command line 'oc' client[:] ", "") }}

     - name: Fetching SSH Access information (Environment Info 4)
       set_fact: ssh_host_target_host={{ custom_attributes|json_query("json.custom_attributes[?name=='Environment Info 4'].value")|first|regex_replace("^SSH Access[:] ssh ", "") }}
     
     - set_fact: target_host_user="{{ ssh_host_target_host | regex_replace("[@](.*)$", "") }}"
     - set_fact: target_host_name="{{ ssh_host_target_host | regex_replace("^(.*)[@]", "") }}"

     - name: Fetching OpenShift user and password (Environment Info 14')
       set_fact: openshift_user_password={{ custom_attributes|json_query("json.custom_attributes[?name=='Environment Info 14'].value")|first|regex_replace("^OpenShift Terminal is configured for users ", "") }}

     - set_fact: openshift_user="{{ openshift_user_password | regex_replace("[ ]with password[ ](.*)$", "") }}"
     - set_fact: openshift_password="{{ openshift_user_password | regex_replace("^(.*)[ ]with password[ ]", "") }}"

     - name: Fetching Password for Host (Environment Info 5)
       set_fact: target_host_password={{ custom_attributes|json_query("json.custom_attributes[?name=='Environment Info 5'].value")|first|regex_replace("^SSH password[:] ", "") }}

     - debug: var=openshift_api
     - debug: var=target_host_user
     - debug: var=target_host_name
     - debug: var=target_host_password

     - name: Logging into OpenShift 
       command: oc login --username={{ openshift_user }} --password={{ openshift_password }} --insecure-skip-tls-verify --server={{ openshift_api }}

     - name: "Create all the necessary Projects/Namespaces needed"
       command: oc new-project {{ item }}
       with_items: [che, appsody, knative-eventing, knative-serving, kafka, quay]
       ignore_errors: True

     - name: "Create all the necessary Operators needed"
       shell: "{{ item }} | oc create -f -"
       with_items:
           - echo '{"apiVersion":"operators.coreos.com\/v1alpha1","kind":"Subscription","metadata":{"name":"knative-eventing-operator","namespace":"openshift-operators"},"spec":{"channel":"alpha","installPlanApproval":"Automatic","name":"knative-eventing-operator","source":"community-operators","sourceNamespace":"openshift-marketplace"}}'
           - echo '{"apiVersion":"operators.coreos.com\/v1alpha1","kind":"Subscription","metadata":{"name":"serverless-operator","namespace":"openshift-operators"},"spec":{"channel":"techpreview","installPlanApproval":"Automatic","name":"serverless-operator","source":"redhat-operators","sourceNamespace":"openshift-marketplace"}}'
       ignore_errors: True

     - name: "Waiting for Knative Serving to be ready"
       command: oc get csv/serverless-operator.v1.4.1 --namespace openshift-operators -o jsonpath='{.status.phase}'
       register: operator_status
       until: operator_status.rc == 0 and operator_status.stdout == "Succeeded"
       retries: 5
       delay: 20

     - name: "Creating Knative-Serving instance on Knative-Serving namespace"
       command: echo '{"apiVersion":"operator.knative.dev\/v1alpha1","kind":"KnativeServing","metadata":{"name":"knative-serving","namespace":"knative-serving"},"spec":{"config":{"autoscaler":{"container-concurrency-target-default":"100","container-concurrency-target-percentage":"1.0","enable-scale-to-zero":"true","max-scale-up-rate":"10","panic-threshold-percentage":"200.0","panic-window":"6s","panic-window-percentage":"10.0","scale-to-zero-grace-period":"30s","stable-window":"60s","tick-interval":"2s"},"defaults":{"revision-cpu-limit":"1000m","revision-cpu-request":"400m","revision-memory-limit":"200M","revision-memory-request":"100M","revision-timeout-seconds":"300"},"deployment":{"registriesSkippingTagResolving":"ko.local,dev.local"},"gc":{"stale-revision-create-delay":"24h","stale-revision-lastpinned-debounce":"5h","stale-revision-minimum-generations":"1","stale-revision-timeout":"15h"},"logging":{"loglevel.activator":"info","loglevel.autoscaler":"info","loglevel.controller":"info","loglevel.queueproxy":"info","loglevel.webhook":"info"},"observability":{"logging.enable-var-log-collection":"false","metrics.backend-destination":"prometheus"},"tracing":{"backend":"none","sample-rate":"0.1"}}}}' | oc create -n knative-serving -f -
       ignore_errors: True

     - name: Open OpenShift Console
       shell: "{{ google_chrome }} $(oc get route/console --namespace openshift-console -o jsonpath='{.spec.port.targetPort}://{.spec.host}')"
       when: google_chrome is defined and google_chrome is not none

     - name: Setting Up Bastion to easy access
       add_host: groups=openshift_bastion hostname={{ target_host_name }}
                 ansible_user={{ target_host_user }} ansible_password={{ target_host_password }}
                 openshift_user={{ openshift_user }} openshift_password={{ openshift_password }} openshift_api={{ openshift_api }}

     - name: Replacing the name of the bastion for OCP4
       replace: path={{ ansible_env.HOME }}/.ssh/config
                regexp="^        Hostname bastion(.*)example.opentlc.com"
                replace="        Hostname {{ target_host_name }}"     

     - name: "Check the existence of a personal public file{{ ':' }} {{ personal_pub_file }}"
       stat: path={{ personal_pub_file }}
       register: pub_file

     - name: "Reading personal Public Key: {{ personal_pub_file }}"
       set_fact: public_key="{{ lookup('file', '{{ personal_pub_file }}') }}"
       when: pub_file.stat.exists

     - name: "Reading local Public Key: {{ ansible_env.HOME }}/.ssh./id_rsa.pub"
       set_fact: public_key="{{ lookup('file', '{{ ansible_env.HOME }}/.ssh/id_rsa.pub') }}"
       when: not pub_file.stat.exists

- name: Setting Up Bastion 
  hosts: openshift_bastion
  gather_facts: false
  become: True
  vars_files:
        - credentials.yaml
  tasks:
    - name: Logging into OpenShift
      command: oc login --username={{ openshift_user }} --password={{ openshift_password }} --insecure-skip-tls-verify --server={{ openshift_api }}

    - name: Inserting public key into /root/.ssh/authorized_keys
      copy: dest=/root/.ssh/authorized_keys content={{ hostvars['localhost']['public_key'] }}

    - name: Cloning Ansible Playbooks for installing Functions
      git: repo=https://github.com/maltron/functions.git dest=/root/functions

    - name: "If docker credentials are provided, generate a small script to add those: docker_registry, docker_username, docker_password"
      copy: dest=/root/run_functions_setup.sh mode=755 content='cd /root/functions/setup/; ./functions-tooling.yaml -e docker_registry={{ docker_registry }} -e docker_username={{ docker_username }} -e docker_password={{ docker_password }}; cd -'
      when: docker_registry is defined and docker_registry is not none and docker_username is defined and docker_username is not none and docker_password is defined and docker_password is not none

